#!/usr/bin/env python
from std_srvs.srv import Empty, EmptyResponse
import rospy
import math
from tf.transformations import euler_from_quaternion
from geometry_msgs.msg import PoseStamped
from crazyflie_driver.msg import Position, Hover
from visualization_msgs.msg import MarkerArray




def handle_spin(empty):

    state = True
    angle = 0
    count = 0
    count_pose = 0
    pub_cmd  = rospy.Publisher('/cf1/cmd_position', Position, queue_size=2)
    rospy.loginfo('Waiting for pose')
    msg=rospy.wait_for_message('/cf1/pose',PoseStamped) 
    # rospy.loginfo(msg)

    x = msg.pose.position.x
    y = msg.pose.position.y
    z = 0.4



    roll, pitch, yaw = euler_from_quaternion((msg.pose.orientation.x,
                                                    msg.pose.orientation.y,
                                                    msg.pose.orientation.z,
                                                    msg.pose.orientation.w))


    cmd = Position()
    cmd.header.stamp = rospy.Time.now()
    cmd.header.frame_id = msg.header.frame_id
    cmd.x = x
    cmd.y = y
    cmd.z = z
    cmd.yaw = 0

    pub_cmd.publish(cmd)
    rospy.sleep(2)

    r = rospy.Rate(10)
    while(state==True):

        angle += 4
        cmd.yaw = angle

        rospy.loginfo(angle)
        if angle >= 360:
            # angle = 0
            state = False
        
        r.sleep()
        pub_cmd.publish(cmd)
        


    rospy.loginfo('Exit')
    return EmptyResponse()


 


def checkpointspin_server():
    rospy.init_node('checkpointspin_server')
    s = rospy.Service('checkpointspin_server', Empty, handle_spin)
    rospy.spin()


rospy.loginfo("Checkpoint service ready")

if __name__ == "__main__":
    rospy.loginfo('Server called')
    checkpointspin_server()




















































# #!/usr/bin/env python

# import sys
# import math
# import json
# import random
# import time


# import math
# import rospy
# import tf2_ros
# import tf2_geometry_msgs
# from tf.transformations import euler_from_quaternion
# from geometry_msgs.msg import PoseStamped
# from crazyflie_driver.msg import Position, Hover
# from visualization_msgs.msg import MarkerArray


# state = 0
# angle = 0
# count = 0
# count_pose = 0
# Xm = 0
# N = 1

# def init_pose(msg):
#     global x_init, y_init

#     x_init = msg.pose.position.x
#     y_init = msg.pose.position.y



# def cmd_func(msg):
#     global state, angle, count, count_pose, Xm, N

#     if count_pose < 1:
#         init_pose(msg)
#         count_pose = 1

#     z_dist = 0.5

#     diff_z = abs(msg.pose.position.z - z_dist)
#     diff_x = abs(msg.pose.position.x - Xm)

#     cmd = Position()
#     cmd.header.stamp = rospy.Time.now()
#     cmd.header.frame_id = msg.header.frame_id
# ##############################################################
#     if state == 0:
#         cmd.x = x_init
#         cmd.y = y_init
#         cmd.z = z_dist
#         cmd.yaw = 0
#         pub_cmd.publish(cmd)

#         if diff_z < 0.05:
#             rospy.sleep(0.2)
#             state = 1
# ##############################################################      
#     if state == 1:
#         cmd.x = x_init + Xm
#         cmd.y = y_init
#         cmd.z = z_dist
#         cmd.yaw = 0
#         pub_cmd.publish(cmd)

#         if diff_x < 0.02:
#             rospy.sleep(0.2)
#             state = 3
# ##################################################################
#     if state == 3:
#         cmd.x = x_init + Xm
#         cmd.y = y_init
#         cmd.z = z_dist
#         angle += 2

#         if angle == 360:
#             angle = 0
#             count += 1
#             rospy.loginfo("Lap: " + str(count))
#         cmd.yaw = angle
#         pub_cmd.publish(cmd)

#         if count == N:
#             if angle == 180:
#                 state = 4
#                 rospy.sleep(0.2)

# ##################################################################
#     if state == 4:
#         cmd.x = x_init
#         cmd.y = y_init
#         cmd.z = z_dist
#         cmd.yaw = 180
#         pub_cmd.publish(cmd)


# ################################################################





# ####################################################################
# ####################################################################

# #### MAIN ############################

# #####################################################################
# ######################################################################

# rospy.init_node('checkpointspin')
# sub_goal_pose = rospy.Subscriber('/cf1/pose', PoseStamped, cmd_func)
# pub_cmd  = rospy.Publisher('/cf1/cmd_position', Position, queue_size=2)
# sub_goal_marker=rospy.Subscriber('/aruco/markers', MarkerArray, cmd_func)


# if __name__ == "__main__":
#     main()
#     rospy.spin()