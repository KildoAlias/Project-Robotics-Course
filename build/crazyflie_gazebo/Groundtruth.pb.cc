// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Groundtruth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Groundtruth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gz_gps_msgs {

namespace {

const ::google::protobuf::Descriptor* Groundtruth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Groundtruth_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Groundtruth_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Groundtruth_2eproto() {
  protobuf_AddDesc_Groundtruth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Groundtruth.proto");
  GOOGLE_CHECK(file != NULL);
  Groundtruth_descriptor_ = file->message_type(0);
  static const int Groundtruth_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, latitude_rad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, longitude_rad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, velocity_east_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, velocity_north_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, velocity_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, attitude_q_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, attitude_q_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, attitude_q_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, attitude_q_z_),
  };
  Groundtruth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Groundtruth_descriptor_,
      Groundtruth::default_instance_,
      Groundtruth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, _has_bits_[0]),
      -1,
      -1,
      sizeof(Groundtruth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Groundtruth, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Groundtruth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Groundtruth_descriptor_, &Groundtruth::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Groundtruth_2eproto() {
  delete Groundtruth::default_instance_;
  delete Groundtruth_reflection_;
}

void protobuf_AddDesc_Groundtruth_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Groundtruth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021Groundtruth.proto\022\013gz_gps_msgs\"\366\001\n\013Gro"
    "undtruth\022\014\n\004time\030\001 \002(\001\022\024\n\014latitude_rad\030\002"
    " \002(\001\022\025\n\rlongitude_rad\030\003 \002(\001\022\020\n\010altitude\030"
    "\004 \002(\001\022\025\n\rvelocity_east\030\005 \001(\001\022\026\n\016velocity"
    "_north\030\006 \001(\001\022\023\n\013velocity_up\030\007 \001(\001\022\024\n\014att"
    "itude_q_w\030\010 \001(\001\022\024\n\014attitude_q_x\030\t \001(\001\022\024\n"
    "\014attitude_q_y\030\n \001(\001\022\024\n\014attitude_q_z\030\013 \001("
    "\001", 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Groundtruth.proto", &protobuf_RegisterTypes);
  Groundtruth::default_instance_ = new Groundtruth();
  Groundtruth::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Groundtruth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Groundtruth_2eproto {
  StaticDescriptorInitializer_Groundtruth_2eproto() {
    protobuf_AddDesc_Groundtruth_2eproto();
  }
} static_descriptor_initializer_Groundtruth_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Groundtruth::kTimeFieldNumber;
const int Groundtruth::kLatitudeRadFieldNumber;
const int Groundtruth::kLongitudeRadFieldNumber;
const int Groundtruth::kAltitudeFieldNumber;
const int Groundtruth::kVelocityEastFieldNumber;
const int Groundtruth::kVelocityNorthFieldNumber;
const int Groundtruth::kVelocityUpFieldNumber;
const int Groundtruth::kAttitudeQWFieldNumber;
const int Groundtruth::kAttitudeQXFieldNumber;
const int Groundtruth::kAttitudeQYFieldNumber;
const int Groundtruth::kAttitudeQZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Groundtruth::Groundtruth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_gps_msgs.Groundtruth)
}

void Groundtruth::InitAsDefaultInstance() {
}

Groundtruth::Groundtruth(const Groundtruth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gz_gps_msgs.Groundtruth)
}

void Groundtruth::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  latitude_rad_ = 0;
  longitude_rad_ = 0;
  altitude_ = 0;
  velocity_east_ = 0;
  velocity_north_ = 0;
  velocity_up_ = 0;
  attitude_q_w_ = 0;
  attitude_q_x_ = 0;
  attitude_q_y_ = 0;
  attitude_q_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Groundtruth::~Groundtruth() {
  // @@protoc_insertion_point(destructor:gz_gps_msgs.Groundtruth)
  SharedDtor();
}

void Groundtruth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Groundtruth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Groundtruth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Groundtruth_descriptor_;
}

const Groundtruth& Groundtruth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Groundtruth_2eproto();
  return *default_instance_;
}

Groundtruth* Groundtruth::default_instance_ = NULL;

Groundtruth* Groundtruth::New(::google::protobuf::Arena* arena) const {
  Groundtruth* n = new Groundtruth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Groundtruth::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_gps_msgs.Groundtruth)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Groundtruth, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Groundtruth*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(time_, attitude_q_w_);
  }
  ZR_(attitude_q_x_, attitude_q_z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Groundtruth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_gps_msgs.Groundtruth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude_rad;
        break;
      }

      // required double latitude_rad = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude_rad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_rad_)));
          set_has_latitude_rad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitude_rad;
        break;
      }

      // required double longitude_rad = 3;
      case 3: {
        if (tag == 25) {
         parse_longitude_rad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_rad_)));
          set_has_longitude_rad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_altitude;
        break;
      }

      // required double altitude = 4;
      case 4: {
        if (tag == 33) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_velocity_east;
        break;
      }

      // optional double velocity_east = 5;
      case 5: {
        if (tag == 41) {
         parse_velocity_east:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_east_)));
          set_has_velocity_east();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_velocity_north;
        break;
      }

      // optional double velocity_north = 6;
      case 6: {
        if (tag == 49) {
         parse_velocity_north:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_north_)));
          set_has_velocity_north();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_velocity_up;
        break;
      }

      // optional double velocity_up = 7;
      case 7: {
        if (tag == 57) {
         parse_velocity_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_up_)));
          set_has_velocity_up();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_attitude_q_w;
        break;
      }

      // optional double attitude_q_w = 8;
      case 8: {
        if (tag == 65) {
         parse_attitude_q_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attitude_q_w_)));
          set_has_attitude_q_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_attitude_q_x;
        break;
      }

      // optional double attitude_q_x = 9;
      case 9: {
        if (tag == 73) {
         parse_attitude_q_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attitude_q_x_)));
          set_has_attitude_q_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_attitude_q_y;
        break;
      }

      // optional double attitude_q_y = 10;
      case 10: {
        if (tag == 81) {
         parse_attitude_q_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attitude_q_y_)));
          set_has_attitude_q_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_attitude_q_z;
        break;
      }

      // optional double attitude_q_z = 11;
      case 11: {
        if (tag == 89) {
         parse_attitude_q_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &attitude_q_z_)));
          set_has_attitude_q_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_gps_msgs.Groundtruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_gps_msgs.Groundtruth)
  return false;
#undef DO_
}

void Groundtruth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_gps_msgs.Groundtruth)
  // required double time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // required double latitude_rad = 2;
  if (has_latitude_rad()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude_rad(), output);
  }

  // required double longitude_rad = 3;
  if (has_longitude_rad()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude_rad(), output);
  }

  // required double altitude = 4;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->altitude(), output);
  }

  // optional double velocity_east = 5;
  if (has_velocity_east()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->velocity_east(), output);
  }

  // optional double velocity_north = 6;
  if (has_velocity_north()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->velocity_north(), output);
  }

  // optional double velocity_up = 7;
  if (has_velocity_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->velocity_up(), output);
  }

  // optional double attitude_q_w = 8;
  if (has_attitude_q_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->attitude_q_w(), output);
  }

  // optional double attitude_q_x = 9;
  if (has_attitude_q_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->attitude_q_x(), output);
  }

  // optional double attitude_q_y = 10;
  if (has_attitude_q_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->attitude_q_y(), output);
  }

  // optional double attitude_q_z = 11;
  if (has_attitude_q_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->attitude_q_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_gps_msgs.Groundtruth)
}

::google::protobuf::uint8* Groundtruth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gz_gps_msgs.Groundtruth)
  // required double time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // required double latitude_rad = 2;
  if (has_latitude_rad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude_rad(), target);
  }

  // required double longitude_rad = 3;
  if (has_longitude_rad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude_rad(), target);
  }

  // required double altitude = 4;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->altitude(), target);
  }

  // optional double velocity_east = 5;
  if (has_velocity_east()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->velocity_east(), target);
  }

  // optional double velocity_north = 6;
  if (has_velocity_north()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->velocity_north(), target);
  }

  // optional double velocity_up = 7;
  if (has_velocity_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->velocity_up(), target);
  }

  // optional double attitude_q_w = 8;
  if (has_attitude_q_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->attitude_q_w(), target);
  }

  // optional double attitude_q_x = 9;
  if (has_attitude_q_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->attitude_q_x(), target);
  }

  // optional double attitude_q_y = 10;
  if (has_attitude_q_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->attitude_q_y(), target);
  }

  // optional double attitude_q_z = 11;
  if (has_attitude_q_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->attitude_q_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_gps_msgs.Groundtruth)
  return target;
}

int Groundtruth::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_gps_msgs.Groundtruth)
  int total_size = 0;

  if (has_time()) {
    // required double time = 1;
    total_size += 1 + 8;
  }

  if (has_latitude_rad()) {
    // required double latitude_rad = 2;
    total_size += 1 + 8;
  }

  if (has_longitude_rad()) {
    // required double longitude_rad = 3;
    total_size += 1 + 8;
  }

  if (has_altitude()) {
    // required double altitude = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
int Groundtruth::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gz_gps_msgs.Groundtruth)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double time = 1;
    total_size += 1 + 8;

    // required double latitude_rad = 2;
    total_size += 1 + 8;

    // required double longitude_rad = 3;
    total_size += 1 + 8;

    // required double altitude = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 240u) {
    // optional double velocity_east = 5;
    if (has_velocity_east()) {
      total_size += 1 + 8;
    }

    // optional double velocity_north = 6;
    if (has_velocity_north()) {
      total_size += 1 + 8;
    }

    // optional double velocity_up = 7;
    if (has_velocity_up()) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_w = 8;
    if (has_attitude_q_w()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double attitude_q_x = 9;
    if (has_attitude_q_x()) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_y = 10;
    if (has_attitude_q_y()) {
      total_size += 1 + 8;
    }

    // optional double attitude_q_z = 11;
    if (has_attitude_q_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Groundtruth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_gps_msgs.Groundtruth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Groundtruth* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Groundtruth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_gps_msgs.Groundtruth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_gps_msgs.Groundtruth)
    MergeFrom(*source);
  }
}

void Groundtruth::MergeFrom(const Groundtruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_gps_msgs.Groundtruth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_latitude_rad()) {
      set_latitude_rad(from.latitude_rad());
    }
    if (from.has_longitude_rad()) {
      set_longitude_rad(from.longitude_rad());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_velocity_east()) {
      set_velocity_east(from.velocity_east());
    }
    if (from.has_velocity_north()) {
      set_velocity_north(from.velocity_north());
    }
    if (from.has_velocity_up()) {
      set_velocity_up(from.velocity_up());
    }
    if (from.has_attitude_q_w()) {
      set_attitude_q_w(from.attitude_q_w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attitude_q_x()) {
      set_attitude_q_x(from.attitude_q_x());
    }
    if (from.has_attitude_q_y()) {
      set_attitude_q_y(from.attitude_q_y());
    }
    if (from.has_attitude_q_z()) {
      set_attitude_q_z(from.attitude_q_z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Groundtruth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_gps_msgs.Groundtruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Groundtruth::CopyFrom(const Groundtruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_gps_msgs.Groundtruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Groundtruth::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Groundtruth::Swap(Groundtruth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Groundtruth::InternalSwap(Groundtruth* other) {
  std::swap(time_, other->time_);
  std::swap(latitude_rad_, other->latitude_rad_);
  std::swap(longitude_rad_, other->longitude_rad_);
  std::swap(altitude_, other->altitude_);
  std::swap(velocity_east_, other->velocity_east_);
  std::swap(velocity_north_, other->velocity_north_);
  std::swap(velocity_up_, other->velocity_up_);
  std::swap(attitude_q_w_, other->attitude_q_w_);
  std::swap(attitude_q_x_, other->attitude_q_x_);
  std::swap(attitude_q_y_, other->attitude_q_y_);
  std::swap(attitude_q_z_, other->attitude_q_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Groundtruth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Groundtruth_descriptor_;
  metadata.reflection = Groundtruth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Groundtruth

// required double time = 1;
bool Groundtruth::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Groundtruth::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Groundtruth::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Groundtruth::clear_time() {
  time_ = 0;
  clear_has_time();
}
 double Groundtruth::time() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.time)
  return time_;
}
 void Groundtruth::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.time)
}

// required double latitude_rad = 2;
bool Groundtruth::has_latitude_rad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Groundtruth::set_has_latitude_rad() {
  _has_bits_[0] |= 0x00000002u;
}
void Groundtruth::clear_has_latitude_rad() {
  _has_bits_[0] &= ~0x00000002u;
}
void Groundtruth::clear_latitude_rad() {
  latitude_rad_ = 0;
  clear_has_latitude_rad();
}
 double Groundtruth::latitude_rad() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.latitude_rad)
  return latitude_rad_;
}
 void Groundtruth::set_latitude_rad(double value) {
  set_has_latitude_rad();
  latitude_rad_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.latitude_rad)
}

// required double longitude_rad = 3;
bool Groundtruth::has_longitude_rad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Groundtruth::set_has_longitude_rad() {
  _has_bits_[0] |= 0x00000004u;
}
void Groundtruth::clear_has_longitude_rad() {
  _has_bits_[0] &= ~0x00000004u;
}
void Groundtruth::clear_longitude_rad() {
  longitude_rad_ = 0;
  clear_has_longitude_rad();
}
 double Groundtruth::longitude_rad() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.longitude_rad)
  return longitude_rad_;
}
 void Groundtruth::set_longitude_rad(double value) {
  set_has_longitude_rad();
  longitude_rad_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.longitude_rad)
}

// required double altitude = 4;
bool Groundtruth::has_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Groundtruth::set_has_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
void Groundtruth::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void Groundtruth::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
 double Groundtruth::altitude() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.altitude)
  return altitude_;
}
 void Groundtruth::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.altitude)
}

// optional double velocity_east = 5;
bool Groundtruth::has_velocity_east() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Groundtruth::set_has_velocity_east() {
  _has_bits_[0] |= 0x00000010u;
}
void Groundtruth::clear_has_velocity_east() {
  _has_bits_[0] &= ~0x00000010u;
}
void Groundtruth::clear_velocity_east() {
  velocity_east_ = 0;
  clear_has_velocity_east();
}
 double Groundtruth::velocity_east() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.velocity_east)
  return velocity_east_;
}
 void Groundtruth::set_velocity_east(double value) {
  set_has_velocity_east();
  velocity_east_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.velocity_east)
}

// optional double velocity_north = 6;
bool Groundtruth::has_velocity_north() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Groundtruth::set_has_velocity_north() {
  _has_bits_[0] |= 0x00000020u;
}
void Groundtruth::clear_has_velocity_north() {
  _has_bits_[0] &= ~0x00000020u;
}
void Groundtruth::clear_velocity_north() {
  velocity_north_ = 0;
  clear_has_velocity_north();
}
 double Groundtruth::velocity_north() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.velocity_north)
  return velocity_north_;
}
 void Groundtruth::set_velocity_north(double value) {
  set_has_velocity_north();
  velocity_north_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.velocity_north)
}

// optional double velocity_up = 7;
bool Groundtruth::has_velocity_up() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Groundtruth::set_has_velocity_up() {
  _has_bits_[0] |= 0x00000040u;
}
void Groundtruth::clear_has_velocity_up() {
  _has_bits_[0] &= ~0x00000040u;
}
void Groundtruth::clear_velocity_up() {
  velocity_up_ = 0;
  clear_has_velocity_up();
}
 double Groundtruth::velocity_up() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.velocity_up)
  return velocity_up_;
}
 void Groundtruth::set_velocity_up(double value) {
  set_has_velocity_up();
  velocity_up_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.velocity_up)
}

// optional double attitude_q_w = 8;
bool Groundtruth::has_attitude_q_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Groundtruth::set_has_attitude_q_w() {
  _has_bits_[0] |= 0x00000080u;
}
void Groundtruth::clear_has_attitude_q_w() {
  _has_bits_[0] &= ~0x00000080u;
}
void Groundtruth::clear_attitude_q_w() {
  attitude_q_w_ = 0;
  clear_has_attitude_q_w();
}
 double Groundtruth::attitude_q_w() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.attitude_q_w)
  return attitude_q_w_;
}
 void Groundtruth::set_attitude_q_w(double value) {
  set_has_attitude_q_w();
  attitude_q_w_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.attitude_q_w)
}

// optional double attitude_q_x = 9;
bool Groundtruth::has_attitude_q_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Groundtruth::set_has_attitude_q_x() {
  _has_bits_[0] |= 0x00000100u;
}
void Groundtruth::clear_has_attitude_q_x() {
  _has_bits_[0] &= ~0x00000100u;
}
void Groundtruth::clear_attitude_q_x() {
  attitude_q_x_ = 0;
  clear_has_attitude_q_x();
}
 double Groundtruth::attitude_q_x() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.attitude_q_x)
  return attitude_q_x_;
}
 void Groundtruth::set_attitude_q_x(double value) {
  set_has_attitude_q_x();
  attitude_q_x_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.attitude_q_x)
}

// optional double attitude_q_y = 10;
bool Groundtruth::has_attitude_q_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Groundtruth::set_has_attitude_q_y() {
  _has_bits_[0] |= 0x00000200u;
}
void Groundtruth::clear_has_attitude_q_y() {
  _has_bits_[0] &= ~0x00000200u;
}
void Groundtruth::clear_attitude_q_y() {
  attitude_q_y_ = 0;
  clear_has_attitude_q_y();
}
 double Groundtruth::attitude_q_y() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.attitude_q_y)
  return attitude_q_y_;
}
 void Groundtruth::set_attitude_q_y(double value) {
  set_has_attitude_q_y();
  attitude_q_y_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.attitude_q_y)
}

// optional double attitude_q_z = 11;
bool Groundtruth::has_attitude_q_z() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Groundtruth::set_has_attitude_q_z() {
  _has_bits_[0] |= 0x00000400u;
}
void Groundtruth::clear_has_attitude_q_z() {
  _has_bits_[0] &= ~0x00000400u;
}
void Groundtruth::clear_attitude_q_z() {
  attitude_q_z_ = 0;
  clear_has_attitude_q_z();
}
 double Groundtruth::attitude_q_z() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.attitude_q_z)
  return attitude_q_z_;
}
 void Groundtruth::set_attitude_q_z(double value) {
  set_has_attitude_q_z();
  attitude_q_z_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.attitude_q_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_gps_msgs

// @@protoc_insertion_point(global_scope)
