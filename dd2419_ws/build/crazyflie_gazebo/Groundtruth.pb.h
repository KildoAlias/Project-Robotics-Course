// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Groundtruth.proto

#ifndef PROTOBUF_Groundtruth_2eproto__INCLUDED
#define PROTOBUF_Groundtruth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gz_gps_msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Groundtruth_2eproto();
void protobuf_AssignDesc_Groundtruth_2eproto();
void protobuf_ShutdownFile_Groundtruth_2eproto();

class Groundtruth;

// ===================================================================

class Groundtruth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz_gps_msgs.Groundtruth) */ {
 public:
  Groundtruth();
  virtual ~Groundtruth();

  Groundtruth(const Groundtruth& from);

  inline Groundtruth& operator=(const Groundtruth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Groundtruth& default_instance();

  void Swap(Groundtruth* other);

  // implements Message ----------------------------------------------

  inline Groundtruth* New() const { return New(NULL); }

  Groundtruth* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Groundtruth& from);
  void MergeFrom(const Groundtruth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Groundtruth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // required double latitude_rad = 2;
  bool has_latitude_rad() const;
  void clear_latitude_rad();
  static const int kLatitudeRadFieldNumber = 2;
  double latitude_rad() const;
  void set_latitude_rad(double value);

  // required double longitude_rad = 3;
  bool has_longitude_rad() const;
  void clear_longitude_rad();
  static const int kLongitudeRadFieldNumber = 3;
  double longitude_rad() const;
  void set_longitude_rad(double value);

  // required double altitude = 4;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 4;
  double altitude() const;
  void set_altitude(double value);

  // optional double velocity_east = 5;
  bool has_velocity_east() const;
  void clear_velocity_east();
  static const int kVelocityEastFieldNumber = 5;
  double velocity_east() const;
  void set_velocity_east(double value);

  // optional double velocity_north = 6;
  bool has_velocity_north() const;
  void clear_velocity_north();
  static const int kVelocityNorthFieldNumber = 6;
  double velocity_north() const;
  void set_velocity_north(double value);

  // optional double velocity_up = 7;
  bool has_velocity_up() const;
  void clear_velocity_up();
  static const int kVelocityUpFieldNumber = 7;
  double velocity_up() const;
  void set_velocity_up(double value);

  // optional double attitude_q_w = 8;
  bool has_attitude_q_w() const;
  void clear_attitude_q_w();
  static const int kAttitudeQWFieldNumber = 8;
  double attitude_q_w() const;
  void set_attitude_q_w(double value);

  // optional double attitude_q_x = 9;
  bool has_attitude_q_x() const;
  void clear_attitude_q_x();
  static const int kAttitudeQXFieldNumber = 9;
  double attitude_q_x() const;
  void set_attitude_q_x(double value);

  // optional double attitude_q_y = 10;
  bool has_attitude_q_y() const;
  void clear_attitude_q_y();
  static const int kAttitudeQYFieldNumber = 10;
  double attitude_q_y() const;
  void set_attitude_q_y(double value);

  // optional double attitude_q_z = 11;
  bool has_attitude_q_z() const;
  void clear_attitude_q_z();
  static const int kAttitudeQZFieldNumber = 11;
  double attitude_q_z() const;
  void set_attitude_q_z(double value);

  // @@protoc_insertion_point(class_scope:gz_gps_msgs.Groundtruth)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_latitude_rad();
  inline void clear_has_latitude_rad();
  inline void set_has_longitude_rad();
  inline void clear_has_longitude_rad();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_velocity_east();
  inline void clear_has_velocity_east();
  inline void set_has_velocity_north();
  inline void clear_has_velocity_north();
  inline void set_has_velocity_up();
  inline void clear_has_velocity_up();
  inline void set_has_attitude_q_w();
  inline void clear_has_attitude_q_w();
  inline void set_has_attitude_q_x();
  inline void clear_has_attitude_q_x();
  inline void set_has_attitude_q_y();
  inline void clear_has_attitude_q_y();
  inline void set_has_attitude_q_z();
  inline void clear_has_attitude_q_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double time_;
  double latitude_rad_;
  double longitude_rad_;
  double altitude_;
  double velocity_east_;
  double velocity_north_;
  double velocity_up_;
  double attitude_q_w_;
  double attitude_q_x_;
  double attitude_q_y_;
  double attitude_q_z_;
  friend void  protobuf_AddDesc_Groundtruth_2eproto();
  friend void protobuf_AssignDesc_Groundtruth_2eproto();
  friend void protobuf_ShutdownFile_Groundtruth_2eproto();

  void InitAsDefaultInstance();
  static Groundtruth* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Groundtruth

// required double time = 1;
inline bool Groundtruth::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Groundtruth::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Groundtruth::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Groundtruth::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double Groundtruth::time() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.time)
  return time_;
}
inline void Groundtruth::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.time)
}

// required double latitude_rad = 2;
inline bool Groundtruth::has_latitude_rad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Groundtruth::set_has_latitude_rad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Groundtruth::clear_has_latitude_rad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Groundtruth::clear_latitude_rad() {
  latitude_rad_ = 0;
  clear_has_latitude_rad();
}
inline double Groundtruth::latitude_rad() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.latitude_rad)
  return latitude_rad_;
}
inline void Groundtruth::set_latitude_rad(double value) {
  set_has_latitude_rad();
  latitude_rad_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.latitude_rad)
}

// required double longitude_rad = 3;
inline bool Groundtruth::has_longitude_rad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Groundtruth::set_has_longitude_rad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Groundtruth::clear_has_longitude_rad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Groundtruth::clear_longitude_rad() {
  longitude_rad_ = 0;
  clear_has_longitude_rad();
}
inline double Groundtruth::longitude_rad() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.longitude_rad)
  return longitude_rad_;
}
inline void Groundtruth::set_longitude_rad(double value) {
  set_has_longitude_rad();
  longitude_rad_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.longitude_rad)
}

// required double altitude = 4;
inline bool Groundtruth::has_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Groundtruth::set_has_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Groundtruth::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Groundtruth::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double Groundtruth::altitude() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.altitude)
  return altitude_;
}
inline void Groundtruth::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.altitude)
}

// optional double velocity_east = 5;
inline bool Groundtruth::has_velocity_east() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Groundtruth::set_has_velocity_east() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Groundtruth::clear_has_velocity_east() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Groundtruth::clear_velocity_east() {
  velocity_east_ = 0;
  clear_has_velocity_east();
}
inline double Groundtruth::velocity_east() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.velocity_east)
  return velocity_east_;
}
inline void Groundtruth::set_velocity_east(double value) {
  set_has_velocity_east();
  velocity_east_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.velocity_east)
}

// optional double velocity_north = 6;
inline bool Groundtruth::has_velocity_north() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Groundtruth::set_has_velocity_north() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Groundtruth::clear_has_velocity_north() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Groundtruth::clear_velocity_north() {
  velocity_north_ = 0;
  clear_has_velocity_north();
}
inline double Groundtruth::velocity_north() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.velocity_north)
  return velocity_north_;
}
inline void Groundtruth::set_velocity_north(double value) {
  set_has_velocity_north();
  velocity_north_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.velocity_north)
}

// optional double velocity_up = 7;
inline bool Groundtruth::has_velocity_up() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Groundtruth::set_has_velocity_up() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Groundtruth::clear_has_velocity_up() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Groundtruth::clear_velocity_up() {
  velocity_up_ = 0;
  clear_has_velocity_up();
}
inline double Groundtruth::velocity_up() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.velocity_up)
  return velocity_up_;
}
inline void Groundtruth::set_velocity_up(double value) {
  set_has_velocity_up();
  velocity_up_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.velocity_up)
}

// optional double attitude_q_w = 8;
inline bool Groundtruth::has_attitude_q_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Groundtruth::set_has_attitude_q_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Groundtruth::clear_has_attitude_q_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Groundtruth::clear_attitude_q_w() {
  attitude_q_w_ = 0;
  clear_has_attitude_q_w();
}
inline double Groundtruth::attitude_q_w() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.attitude_q_w)
  return attitude_q_w_;
}
inline void Groundtruth::set_attitude_q_w(double value) {
  set_has_attitude_q_w();
  attitude_q_w_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.attitude_q_w)
}

// optional double attitude_q_x = 9;
inline bool Groundtruth::has_attitude_q_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Groundtruth::set_has_attitude_q_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Groundtruth::clear_has_attitude_q_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Groundtruth::clear_attitude_q_x() {
  attitude_q_x_ = 0;
  clear_has_attitude_q_x();
}
inline double Groundtruth::attitude_q_x() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.attitude_q_x)
  return attitude_q_x_;
}
inline void Groundtruth::set_attitude_q_x(double value) {
  set_has_attitude_q_x();
  attitude_q_x_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.attitude_q_x)
}

// optional double attitude_q_y = 10;
inline bool Groundtruth::has_attitude_q_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Groundtruth::set_has_attitude_q_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Groundtruth::clear_has_attitude_q_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Groundtruth::clear_attitude_q_y() {
  attitude_q_y_ = 0;
  clear_has_attitude_q_y();
}
inline double Groundtruth::attitude_q_y() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.attitude_q_y)
  return attitude_q_y_;
}
inline void Groundtruth::set_attitude_q_y(double value) {
  set_has_attitude_q_y();
  attitude_q_y_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.attitude_q_y)
}

// optional double attitude_q_z = 11;
inline bool Groundtruth::has_attitude_q_z() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Groundtruth::set_has_attitude_q_z() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Groundtruth::clear_has_attitude_q_z() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Groundtruth::clear_attitude_q_z() {
  attitude_q_z_ = 0;
  clear_has_attitude_q_z();
}
inline double Groundtruth::attitude_q_z() const {
  // @@protoc_insertion_point(field_get:gz_gps_msgs.Groundtruth.attitude_q_z)
  return attitude_q_z_;
}
inline void Groundtruth::set_attitude_q_z(double value) {
  set_has_attitude_q_z();
  attitude_q_z_ = value;
  // @@protoc_insertion_point(field_set:gz_gps_msgs.Groundtruth.attitude_q_z)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_gps_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Groundtruth_2eproto__INCLUDED
